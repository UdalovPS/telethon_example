import asyncio
import logging

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command

# создаем объект logging. МОжно и без него, ну его нужно использовать чтобы выводить в терминал информацию о работе программы
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(name)s - %(message)s"
)
logger = logging.getLogger(__name__)


BOT_TOKEN = "Токен который ты получаешь в BotFather"

"""Создаем объект бота. Именно в данном метода инкапсулированы все методы общения
с telegram по API. Под капотом там происходит отправка запросов по API к telegram
"""
bot = Bot(token=BOT_TOKEN)


"""Создаем объект диспетчера.
Данный объект занимается тем, что обрабатывает входящие уведомления.

Например ты написал сообщение боту 'ПРИВЕТ'. Диспетчер поймал данное сообщение и оно залетело
в код (Пришло сообщение от такого пользователя вот с таким содержанием)
"""
dp = Dispatcher()


"""
Как с этим работать глобально.
Прочти сначала все что написано в функции main и ниже ее. После прочтения вернись обратно сюда
и читай далее


У нас вызвана функция start_polling которая запрашивает у телеграмма какие-то события.
Ниже будут приведены 2 обработчика событий.
Они добавляются и обрабатываются порядке из добавления.
Ниже ты увидишь что сначала добавляется обработчик @dp.message(Command("test")), а затем @dp.message(F.text).
Добавляются они при помощи декораторов (пока не разбирайся как это работает, а просто прими за данность.

Добавляются обработчики событий сверху вних в порядке очереди и обрабатываются они точно в такой
же очередности.

Простым языком. Если следовать написанному ниже коду. Когда ты напишешь сообщение 'Привет'
то в бота залетит ивент. Далее данный ивент пойдет по очереди в обработчики с вопросом
'Случилось ли событие, которое ты обрабатываешь?' Если да, то вызовется функция которая закреплена
за данным обработчиком. Если нет, то данный ивент пойдет к следующему обработчику вниз по коду.

Первый обработчик проверяет 'прислал ли пользователь команду test или нет. Поскольку было написано сообщение 'Привет',
которое не является командой, то данный обработчик не отработает и ивент уйдет дальше.

Второй обработчик ловит текстовые сообщения и в данном случае отработает именно он.

В нашем случае обработчиков всего 2. В реальности их может быть сколько угодно.
Обрабатываться они будут в порядке сверху вниз
"""


"""
Обработчик команд.
Ключевая строчка @dp.message(Command("test")) которая добавляет в диспетчер
обработчик команды (команда это когда боту пишут через СЛЭШ. В данном случае /test.
Простым языком. Если кто-то напишет боту в чат /test, то вызовется функция command_processor.
В самой функции можно написать все что угодно
"""
@dp.message(Command("test"))
async def command_processor(message: types.Message):
    """Логическая функция обработки команды
    Когда приходит команда, то создается объект
    <message>. Он много чего содержит, но на начальных
    этапах нас интересуют несколько вещей
    1. От кого это сообщение
    2. Текст команды
    """
    user_id = message.from_user.id  # идентификатор пользователя который написал сообщение
    text = message.text  # текст команды которую "поймал" бот

    """Ответить можно 2-мя способами. Коротким и длинным"""

    # коротки вариант
    await message.answer(
        text=f"ответ короткого варианта. Команда от {user_id}. Текст команды: {text}")  # текст можно выставить любой

    # длинный вариант. Тоже самое, но указываешь кому конкретно пишешь.
    # коротком варианте под капотом происходит тоже самое
    await bot.send_message(chat_id=user_id, text=f"длинный вариант ответа. Команда от {user_id}. Текст команды: {text}")


"""
Обработчик тестовых сообщений.
Ключевой тут является строчка @dp.message(F.text) которая добавляет в диспетчер 
обработчик произошедшего события (в нашем случае обычного текстового сообщения).
Простым языком. Когда был написан код @dp.message(F.text) мы сказали, что 'если пользователь 
написал обычное текстовое сообщение, то вызови функцию text_processor'
В самой функции можно уже написать все что угодно.
"""
@dp.message(F.text)
async def text_processor(message: types.Message):
    """Логическая функция обработки текстовых сообщений.
    Когда приходит обычное текстовое сообщение, то создается объект
    <message>. Он много чего содержит, но на начальных
    этапах нас интересуют несколько вещей
    1. От кого это сообщение
    2. Текст данного сообщения
    """
    user_id = message.from_user.id      # идентификатор пользователя который написал сообщение
    text = message.text                 # текст сообщения которое "поймал" бот

    """Ответить можно 2-мя способами. Коротким и длинным"""

    # коротки вариант
    await message.answer(text=f"ответ короткого варианта. Сообщение от {user_id}. Текст сообщения: {text}")   # текст можно выставить любой

    # длинный вариант. Тоже самое, но указываешь кому конкретно пишешь.
    # коротком варианте под капотом происходит тоже самое
    await bot.send_message(chat_id=user_id, text=f"длинный вариант ответа. Сообщение от {user_id}. Текст сообщения: {text}")


async def main():       # стартовая функция. (принято главную функцию которая стартует приложение называть main
    """Запускаем поллинг.
    Что происходит под капотом. Приложение непрерывно отправляет запросы на серверы telegram
    с вопросом 'Произошли ли какие-то события?'. Если что-то произошло, то в ответ приходят
    Ивенты которые попадают в обработчики которые находятся выше.
    Запросы в телеграм отправляются до бесконечности по очереди пока работает бот
    """
    await dp.start_polling(bot)


if __name__ == "__main__":
    """Запуск событийного цикла, который до бесконечности опрашивает сервера telegram"""
    asyncio.run(main())


"""Для запуска всего проекта выполняешь в терминале команды
python3.12 -m venv venv             # создание виртуального окружения
source venv/bin/activate            # запуск виртуального окружения
pip install -r requirements.txt     # установка зависимостей которые требуется для работы бота. Вместо этого можно просто выполнить pip install aiogram
python example_1.py                 # запуск бота
"""